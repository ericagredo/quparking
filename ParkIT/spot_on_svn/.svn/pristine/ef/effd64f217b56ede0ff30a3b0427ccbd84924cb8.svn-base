<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\File;
use App\Http\Requests;
use App\Http\Helper;
use App\Models\Users;
use App\Models\ParkingspotImages;
use App\Models\ParkingSpot;
use App\Models\Pricing;
use App\Models\SurchargeAmount;
use Mail;
use DateTime;

use App\Models\DeviceMaster;
use Aws\Credentials\CredentialProvider;


class BraintreeController extends Controller
{

    public function checkout()
    {

        //$clientToken = Braintree_ClientToken::generate();
        $clientToken = \Braintree_ClientToken::generate();
        if (isset($clientToken) && !empty($clientToken)) {
            return $clientToken;
        } else {
            return '';
        }
    }

    public function checkout_post()
    {
        $userID = $_POST["userID"];
        $parking_spot_id = $_POST["parking_spot_id"];
        $amount = $_POST["amount"];
        $nonceFromTheClient = $_POST["payment_method_nonce"];
        $result = \Braintree_Transaction::sale([
            'amount' => $amount,
            'paymentMethodNonce' => 'fake-valid-nonce',
            'options' => [
                'submitForSettlement' => True
            ]
        ]);

        if ($result->success || !is_null($result->transaction)) {
            $transaction = $result->transaction;
            $payment_history = DB::table('payment_history')->insertGetId(
                [
                    'users_id' => $userID,
                    'transaction_id' => $transaction->id,
                    'transaction_details' => $transaction,
                    'payment_type' => 'booking_amount',
                    'amount' => $amount,
                    'created_date' => Helper::get_curr_datetime(),
                    'status' => 'Complete'
                ]
            );
            if(isset($parking_spot_id) && !empty($parking_spot_id) && isset($userID) && !empty($userID)){
                $host_user_id = DB::table('parking_spot')->select('users_id')->Where('id', $parking_spot_id)->first();
                $tran_entry_for_renter = DB::table('transaction_history')->insertGetId([
                    'users_id' => $userID,
                    'transaction_id' => $payment_history,
                    'parking_spot_id' => $parking_spot_id,
                    'transaction_for' => 'Booking',
                    'amount' => $amount,
                    'created_date' => Helper::get_curr_datetime(),
                    'created_by' => $userID
                ]);
                $tran_entry_for_host = DB::table('transaction_history')->insertGetId([
                    'users_id' => $host_user_id,
                    'transaction_id' => $payment_history,
                    'parking_spot_id' => $parking_spot_id,
                    'transaction_for' => 'Parking_spot',
                    'amount' => $amount,
                    'created_date' => Helper::get_curr_datetime(),
                    'created_by' => $userID
                ]);
            }
            return $transaction->id;
        } else {
            $errorString = "";
            foreach ($result->errors->deepAll() as $error) {
                $errorString .= 'Error: ' . $error->code . ": " . $error->message . "\n";
            }
            return $errorString;
        }

    }

    public function transaction_details(Request $request){

        $Apikey = $request->Apikey;
        if ($Apikey == APIKEY) {
            $limit = $request->page_limit;
            $offset = $request->page_offset;
            $userID = $request->userID;

            if ($offset) {
                $offset1 = $offset + 1;
                $start = ($offset1 - 1) * $limit;
            } else {
                $start = 0;
            }

            $transaction_details = "SELECT 
                                      *
                                FROM transaction_history 
                                WHERE transaction_history.users_id = $userID
                                ORDER BY transaction_history.id DESC 
                                LIMIT $start,$limit ";
            $transaction_details = DB::Select($transaction_details);

            if(count($transaction_details) > 0){
                foreach ($transaction_details as $single){
                    if($single->transaction_for == 'refund'){

                    }else{
                        $details = "SELECT 
                                          b.id as booking_id,
                                          b.total_time,
                                          b.booking_status,
                                          b.booking_date,
                                          b.booking_time,
                                          b.generated_booking_id,
                                          b.paid_amount,
                                          b.booking_transaction_id,
                                          b.parking_spot_id as spot_id,
                                          parking_spot.address as spot_address,
                                          parking_spot.location as spot_location
                                        FROM booking as b
                                        LEFT JOIN parking_spot ON parking_spot.id = b.parking_spot_id
                                        WHERE b.users_id = $single->users_id";
                        $details = DB::Select($details);
                    }
                    $single->details = $details;
                }
            }

            if(count($transaction_details) > 0){
                return response()->json(['message' => 'Success', 'code' => 200, 'data' => $transaction_details], 200, [], JSON_NUMERIC_CHECK);
            }else{
                return response()->json(['message' => 'Transactions not available', 'code' => 101]);
            }
        }else{
            return response()->json(['message' => 'Unauthorised Call', 'code' => 101]);
        }
    }

}
