<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\File;
use App\Http\Requests;
use App\Http\Helper;
use App\Models\Users;
use App\Models\ParkingspotImages;
use App\Models\ParkingSpot;
use App\Models\Pricing;
use App\Models\SurchargeAmount;
use Mail;
use DateTime;

use App\Models\DeviceMaster;
use Aws\Credentials\CredentialProvider;


class PushNotificationController extends Controller {

    /*This is cron function for
        => Notify me after fixed 'X' number of hours/days of exit time (as per the booking details)*/
    public static function user_can_not_exit_from_booking(){


        date_default_timezone_set('Asia/Kolkata');
        $current_datetime = date("Y-m-d H:i:s");
        $current_time = date("H:i:s", strtotime($current_datetime));
        $current_date = date("Y-m-d", strtotime($current_datetime));

        $txt = $current_datetime. "start ;";
        $myfile = file_put_contents(public_path('log/user_can_not_exit_from_booking.text'), $txt.PHP_EOL , FILE_APPEND | LOCK_EX);


        $booking_details = DB::table('booking')
            ->select('*')
            ->where('booking.exit_date_time', '=', "0000-00-00 00:00:00")
            ->where('booking.entry_date_time', '!=', "0000-00-00 00:00:00")
            ->where('booking.booking_status', '=', "Upcoming")
            ->where('booking.status', '=', "Active")
            ->get();

        if(count($booking_details) > 0){

            foreach ($booking_details as $booking){
                if ($booking->booking_type == "Hours"){
                    $exit_date_time = $booking->entry_date_time;
                    $exit_date = date("H:i:s", strtotime($exit_date_time));
                    $temp_hours = '+' . $booking->booking_hours . ' hour';
                    $final_exit_time = date('H:i:s', strtotime($exit_date . $temp_hours));
                    $final_exit_time = date('Y-m-d', strtotime($booking->entry_date_time)).' '.$final_exit_time;
                }elseif ($booking->booking_type == "days"){
                    $exit_date_time = strtotime($booking->entry_date_time);
                    $temp_day = "+".$booking->booking_days." day";
                    $final_exit_time = date("Y-m-d H:i:s", strtotime($temp_day, $exit_date_time));
                }elseif ($booking->booking_type == "Months"){
                    $exit_date_time = strtotime($booking->entry_date_time);
                    $temp_month = "+".$booking->booking_month." month";
                    $final_exit_time = date("Y-m-d H:i:s", strtotime($temp_month, $exit_date_time));
                }
            }

            //echo $final_exit_time; exit;
            //if( date("Y-m-d",strtotime($final_exit_time)) == date("Y-m-d",strtotime($current_datetime)) ) {
                if( strtotime($final_exit_time) < strtotime($current_datetime) ){

                    $notification = DB::table('notification')
                        ->join('user_notification', 'user_notification.id', '=', 'notification.push_notification_id')
                        ->Where('notification.users_id', $booking->users_id)
                        ->get();

                    if(count($notification) > 0 && $notification[3]->notification_mode == "ON" ){
                        $deviceDetails = DeviceMaster::Where('users_id', $booking->users_id)->where('is_login', 'Yes')->first();
                        if(count($deviceDetails) > 0){
                            $data = [
                                'notification' => $booking->users_id,
                                'type' => 'booking',
                                'message'=> 'Your exit time is expire, please complete ypor booking'
                            ];
                            $message_title = 'Exit time has been expired';

                            DeviceMaster::sendPushNotification($deviceDetails['gcm_arn'], $message_title, $data);

                        }
                    }

                }
            //}
        }

    }

    /*This is cron function for
        => Notify me when less than 25% of my time allowance is left*/
    public static function befor_exit_time_send_push(){
        date_default_timezone_set('Asia/Kolkata');
        $current_datetime = date("Y-m-d H:i:s");
        $current_time = date("H:i:s", strtotime($current_datetime));
        $current_date = date("Y-m-d", strtotime($current_datetime));

        $txt = $current_datetime. "start ;";
        $myfile = file_put_contents(public_path('log/befor_exit_time_send_push.text'), $txt.PHP_EOL , FILE_APPEND | LOCK_EX);


        $booking_details = DB::table('booking')
            ->select('*')
            ->where('booking.exit_date_time', '=', "0000-00-00 00:00:00")
            ->where('booking.entry_date_time', '!=', "0000-00-00 00:00:00")
            ->where('booking.booking_status', '=', "Upcoming")
            ->where('booking.status', '=', "Active")
            ->get();
        if(count($booking_details) > 0) {
            foreach ($booking_details as $booking) {
                if ($booking->booking_type == "Hours") {
                    $exit_date_time = $booking->entry_date_time;
                    $exit_date = date("H:i:s", strtotime($exit_date_time));
                    $temp_hours = '+' . $booking->booking_hours . ' hour';
                    $final_exit_time = date('H:i:s', strtotime($exit_date . $temp_hours));
                    $final_exit_time = date('Y-m-d', strtotime($booking->entry_date_time)) . ' ' . $final_exit_time;
                } elseif ($booking->booking_type == "days") {
                    $exit_date_time = strtotime($booking->entry_date_time);
                    $temp_day = "+" . $booking->booking_days . " day";
                    $final_exit_time = date("Y-m-d H:i:s", strtotime($temp_day, $exit_date_time));
                } elseif ($booking->booking_type == "Months") {
                    $exit_date_time = strtotime($booking->entry_date_time);
                    $temp_month = "+" . $booking->booking_month . " month";
                    $final_exit_time = date("Y-m-d H:i:s", strtotime($temp_month, $exit_date_time));
                }
            }
            $final_exit_time1 = $final_exit_time;
            $final_exit_time = date("Y-m-d H:i:s",strtotime ( '-30 minute' , strtotime ( $final_exit_time ) )) ;
            if( date("Y-m-d",strtotime($final_exit_time)) == date("Y-m-d",strtotime($current_datetime)) ) {
                if (strtotime($final_exit_time) <= strtotime($current_datetime) && strtotime($final_exit_time1) > strtotime($current_datetime)) {

                    $notification = DB::table('notification')
                        ->join('user_notification', 'user_notification.id', '=', 'notification.push_notification_id')
                        ->Where('notification.users_id', $booking->users_id)
                        ->get();
                    if(count($notification) > 0 && $notification[5]->notification_mode == "ON"){
                        $deviceDetails = DeviceMaster::Where('users_id', $booking->users_id)->where('is_login', 'Yes')->first();
                        if(count($deviceDetails) > 0){
                            $data = [
                                'notification' => $booking->users_id,
                                'type' => 'booking',
                                'message'=> 'Your exit time is '.$final_exit_time1.'please exit from spot before finish your booking time'
                            ];
                            $message_title = 'Your exit time is '.$final_exit_time1;

                            DeviceMaster::sendPushNotification($deviceDetails['gcm_arn'], $message_title, $data);

                        }
                    }

                }
            }
        }
    }
}
