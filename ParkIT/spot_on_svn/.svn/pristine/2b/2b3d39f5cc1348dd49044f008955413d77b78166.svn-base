<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\File;
use App\Http\Requests;
use App\Http\Helper;
use App\Models\ParkingSpot;
use Mail;

class ReservationController extends Controller {
    /*
     * Request Parameter :  [Apikey, parking_spot_userID, filter_type, timezone, page_limit, page_offset]
     * Method : POST
     * Request Api Url : "/api/reservationList"
     * Request Controller & Method : ReservationController/reservationList
     * Success response : [ message : Success,  code : 200, data : Array of Reservation List]
     * Error response : 
      1)[ message : Reservation not available., code : 101]
      2)[ message : Unauthorised Call. , code : 101]
     */

    public function reservationList(Request $request) {
        $Apikey = $request->Apikey;
        if ($Apikey == APIKEY) {
            $userID = $request->userID;
            $filter_type = $request->filter_type;
            $timezone = $request->timezone;
            $page_limit = $request->page_limit;
            $page_offset = $request->page_offset;

            date_default_timezone_set($timezone);
            $CurrentDateTime = date('Y-m-d H:i:s');

            if ($page_offset) {
                $page_offset1 = $page_offset + 1;
                $start = ($page_offset1 - 1) * $page_limit;
            } else {
                $start = 0;
            }

            $parking_spotSql = "SELECT id FROM parking_spot WHERE users_id = '".$userID."' And status='Active'";
            $parking_spotArray = DB::Select($parking_spotSql);
            
            $i = 0;
            $get_spot_ids = '';
            foreach ($parking_spotArray as $spots_ids) {
                $get_spot_ids .= "FIND_IN_SET($spots_ids->id, parking_spot_id) OR ";
                $i++;
            }

            $spot_ids = rtrim($get_spot_ids, " OR");

            $get_spot_id_sql = '';
            if ($spot_ids != '') {
                $get_spot_id_sql = " AND (" . $spot_ids .")";
            }
            
            $AndWhere = "";
            if ($filter_type == 'upcoming') {
                $AndWhere .= ' And b.booking_date >= STR_TO_DATE( "' . $CurrentDateTime . '", "%Y-%m-%d" )';
            } else if ($filter_type == 'past') {
                $AndWhere .= ' And b.booking_date <= STR_TO_DATE( "' . $CurrentDateTime . '", "%Y-%m-%d" )';
            }

            $reservationArray = array();
            $reservationSql = "SELECT `b`.*,`u`.firstname, `u`.lastname, `u`.profile_image "
                            . "FROM `booking` as b "
                            . "LEFT JOIN `parking_spot` as p ON `b`.parking_spot_id = p.id "
                            . "LEFT JOIN `users` as u ON `b`.users_id = u.id "
                            . "Where b.status='Active' And b.booking_status='Completed' $get_spot_id_sql $AndWhere ORDER BY b.id desc limit " . $start . " , " . $page_limit;
            $reservationArray = DB::Select($reservationSql);
            if (count($reservationArray) > 0) {
                foreach($reservationArray as $reservation){
                    $reservation->profile_image = !empty($reservation->profile_image) ? asset('uploads/user_profile_image/'.$reservation->profile_image) : "";
                }
                return response()->json(['message' => 'Success', 'code' => 200, 'myReservation' => $reservationArray]);
            } else {
                return response()->json(['message' => 'Reservation not available.', 'code' => 101]);
            }
        } else {
            return response()->json(['message' => 'Unauthorised Call', 'code' => 101]);
        }
    }
    
    /*
     * Request Parameter :  [Apikey, booking_id, userID]
     * Method : POST
     * Request Api Url : "/api/reservationDetails"
     * Request Controller & Method : ReservationController/reservationDetails
     * Success response : [ message : Success,  code : 200, data : Array of Reservation List]
     * Error response : 
      1)[ message : Reservation not available., code : 101]
      2)[ message : Unauthorised Call. , code : 101]
     */

    public function reservationDetails(Request $request) {
        $Apikey = $request->Apikey;
        if ($Apikey == APIKEY) {
            $booking_id = $request->booking_id;
            $userID = $request->userID;
         
            $reservationArray = array();
            $reservationSql = "Select b.*,u.id as uid, u.firstname, u.lastname , u.contact_number, u.profile_image, p.id as pid, p.address, p.postal_code, p.country_id, p.state_id, p.city_name, c.country_name, s.state_name "
                        . "from booking as b "
                        . "Left Join parking_spot as p ON b.parking_spot_id = p.id "
                        . "Left Join users as u ON b.users_id = u.id "
                        . "Left Join country as c ON p.country_id = c.id "
                        . "Left Join state as s ON p.state_id = s.id "
                        . "Where b.status='Active' And b.booking_status='Completed' And b.id = '".$booking_id."'";
            $reservationArray = DB::Select($reservationSql);
            if (count($reservationArray) > 0) {
                foreach($reservationArray as $reservation){
                    $reservation->profile_image = !empty($reservation->profile_image) ? asset('uploads/user_profile_image/'.$reservation->profile_image) : "";
                }
                
                $ExistReview = DB::table('review')->where('booking_id', $booking_id)->Where('users_id', $userID)->first();
                if (count($ExistReview) > 0) {
                    $ExistReview->questions_answer = (!empty($ExistReview->questions_answer) ? unserialize($ExistReview->questions_answer) : array());
                }else{
                    $ExistReview = array();
                }
                
                return response()->json(['message' => 'Success', 'code' => 200, 'Reservationdetails' => $reservationArray, 'ReceivedReview' => $ExistReview]);
            } else {
                return response()->json(['message' => 'Reservation not available.', 'code' => 101]);
            }
        } else {
            return response()->json(['message' => 'Unauthorised Call', 'code' => 101]);
        }
    }
    
    /*
     * Request Parameter :  [Apikey, booking_id]
     * Method : POST
     * Request Api Url : "/api/deletereservation"
     * Request Controller & Method : ReservationController/deletereservation
     * Success response : [ message : Reservation deleted successfully.,  code : 200]
     * Error response : 
      1)[ message : Reservation not deleted successfully., code : 101]
     * 2)[ message : Unauthorised Call. , code : 101]
     */

    public function deletereservation(Request $request) {
        $Apikey = $request->Apikey;
        if ($Apikey == APIKEY) {
            $booking_id = $request->booking_id;
            $del_parking_spot = DB::delete('DELETE FROM `booking` WHERE id IN (' . $booking_id . ')');
            if ($del_parking_spot) {
                $msg = 'Reservation deleted successfully.';
                $code = 200;
                return response()->json(['message' => $msg, 'code' => $code]);
            } else {
                $msg = 'Reservation not deleted successfully.';
                $code = 101;
                return response()->json(['message' => $msg, 'code' => $code]);
            }
        } else {
            return response()->json(['message' => 'Unauthorised Call', 'code' => 101]);
        }
    }
    
    /*
     * Request Parameter :  [Apikey, booking_id]
     * Method : POST
     * Request Api Url : "/api/canclebookingbyhost"
     * Request Controller & Method : ReservationController/canclebookingbyhost
     * Success response : [ message : Booking cancel by host successfully.,  code : 200]
     * Error response : 
      1)[ message : Booking cancel by host not successfully., code : 101]
      2)[ message : Unauthorised Call. , code : 101]
     */

    public function canclebookingbyhost(Request $request) {
        $Apikey = $request->Apikey;
        if ($Apikey == APIKEY) {
            $booking_id = $request->booking_id;
            
            $booking_update_id = DB::table('booking')->where('id', $booking_id)->update([
                    'cancelled_by' => 'Host'
            ]);
            if ($booking_update_id) {
                $msg = 'Booking cancel by host successfully.';
                $code = 200;
                return response()->json(['message' => $msg, 'code' => $code]);
            } else {
                $msg = 'Booking cancel by host not successfully.';
                $code = 101;
                return response()->json(['message' => $msg, 'code' => $code]);
            }
        } else {
            return response()->json(['message' => 'Unauthorised Call', 'code' => 101]);
        }
    }
}
